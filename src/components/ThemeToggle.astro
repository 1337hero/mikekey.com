---
import DefaultSwitchSound from '../assets/sounds/light-on.mp3';

export interface Props {
  class?: string;
  sound?: string; // optional custom URL; defaults to bundled asset
}

const { class: className = '', sound } = Astro.props;
const audioSrc = sound || DefaultSwitchSound;
---

<button
  id="theme-toggle"
  type="button"
  data-theme-switcher
  data-sound-switch
  data-sound={audioSrc}
  class={`p-2 rounded-lg bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors ${className}`}
  aria-label="Toggle theme"
>
  <svg class="w-5 h-5 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
  </svg>
  <svg class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
    <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
  </svg>
</button>

<script is:inline type="module">
  // Lazy-init theme switcher on idle and play a tiny click sound
  const storageKey = 'theme-preference';

  const setTheme = (mode) => {
    const root = document.documentElement;
    if (mode === 'dark') root.classList.add('dark');
    else root.classList.remove('dark');
    try { localStorage.setItem(storageKey, mode); } catch (_) {}
  };
  const currentTheme = () => (
    document.documentElement.classList.contains('dark') ? 'dark' : 'light'
  );

  const schedule = (fn) => (
    'requestIdleCallback' in window ? window.requestIdleCallback(fn) : setTimeout(fn, 1)
  );

  function initThemeToggle() {
    const button = document.getElementById('theme-toggle');
    if (!button || button.dataset.init === 'true') return;
    button.dataset.init = 'true';

    // Prepare audio (simple HTMLAudioElement for minimal overhead)
    let clickAudio = null;
    const src = button.getAttribute('data-sound') || '/sounds/switch.mp3';
    try {
      clickAudio = new Audio(src);
      clickAudio.preload = 'auto';
    } catch (_) {}

    const updateButton = () => {
      const isDark = currentTheme() === 'dark';
      button.setAttribute('aria-pressed', isDark ? 'true' : 'false');
      button.setAttribute('aria-label', isDark ? 'Switch to light mode' : 'Switch to dark mode');
    };

    const onClick = () => {
      const next = currentTheme() === 'dark' ? 'light' : 'dark';
      setTheme(next);
      updateButton();
      if (clickAudio) {
        try { clickAudio.currentTime = 0; clickAudio.play(); } catch (_) {}
      }
    };

    updateButton();
    button.addEventListener('click', onClick);
  }

  schedule(initThemeToggle);
  document.addEventListener('astro:page-load', () => schedule(initThemeToggle));
</script>
